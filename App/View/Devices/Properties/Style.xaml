<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:ElectricSketch.ViewModel"
                    xmlns:view="clr-namespace:ElectricSketch.View"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <!--
        Style guide:
        Use a 10x10 px grid.
        Put the pins 5 px outside the canvas, at an offset multiple of 10 from the logical center.
        The catch is that we only show the pins if the mouse is over the control. But their area is 10x10, so it overlaps.
        This gives a nice effect that it's easy to move the device without clicking on a pin, yet it's also easy
        to pick a pin
    -->
    <DataTemplate DataType="{x:Type vm:Voltage}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBox Text="{Binding Value}" IsReadOnly="{Binding Path=(view:DeviceContainer.Device).InSimulation, RelativeSource={RelativeSource Self}}"/>
            <TextBlock Grid.Column="1" Text="V" Margin="3, 0" VerticalAlignment="Center"/>
        </Grid>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NullableVoltage}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBox Text="{Binding Value, TargetNullValue=''}" IsReadOnly="{Binding Path=(view:DeviceContainer.Device).InSimulation, RelativeSource={RelativeSource Self}}"/>
            <TextBlock Text="{Binding Detected, StringFormat={}{0} (auto)}" Margin="5" Foreground="Gray" IsHitTestVisible="False" x:Name="auto" Visibility="Collapsed"/>
            <TextBlock Grid.Column="1" Text="V" Margin="3, 0" VerticalAlignment="Center"/>
        </Grid>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding HasValue}" Value="False"/>
                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" TargetName="auto" Value="Visible"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:Frequency}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBox Text="{Binding Value}" IsReadOnly="{Binding Path=(view:DeviceContainer.Device).InSimulation, RelativeSource={RelativeSource Self}}"/>
            <TextBlock Grid.Column="1" Text="Hz" Margin="3, 0" VerticalAlignment="Center"/>
        </Grid>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NullableFrequency}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBox Text="{Binding Value, TargetNullValue=''}" IsReadOnly="{Binding Path=(view:DeviceContainer.Device).InSimulation, RelativeSource={RelativeSource Self}}"/>
            <TextBlock Text="{Binding Detected, StringFormat={}{0} (auto)}" Margin="5" Foreground="Gray" IsHitTestVisible="False" x:Name="auto" Visibility="Collapsed"/>
            <TextBlock Grid.Column="1" Text="Hz" Margin="3, 0" VerticalAlignment="Center"/>
        </Grid>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding HasValue}" Value="False"/>
                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" TargetName="auto" Value="Visible"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:Percent}">
        <TextBox Text="{Binding Value}" IsReadOnly="{Binding Path=(view:DeviceContainer.Device).InSimulation, RelativeSource={RelativeSource Self}}"/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NumPoles}">
        <Slider Value="{Binding Value}" Minimum="1" Maximum="10" SmallChange="1" LargeChange="1"
                IsEnabled="{Binding Path=(view:DeviceContainer.Device).InSimulation, RelativeSource={RelativeSource Self}, Converter={StaticResource not}}"/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NumPositions}">
        <Slider Value="{Binding Value}" Minimum="2" Maximum="10" SmallChange="1" LargeChange="1"
                IsEnabled="{Binding Path=(view:DeviceContainer.Device).InSimulation, RelativeSource={RelativeSource Self}, Converter={StaticResource not}}"/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:CurrentPosition}">
        <Slider Value="{Binding Value}" Minimum="0" Maximum="{Binding Path=(view:DeviceContainer.Device).MaxPosition, RelativeSource={RelativeSource Self}}" SmallChange="1" LargeChange="1"/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:DesignOnlyBoolean}">
        <CheckBox IsChecked="{Binding Value}"
                  IsEnabled="{Binding Path=(view:DeviceContainer.Device).InSimulation, RelativeSource={RelativeSource Self}, Converter={StaticResource not}}"/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:Boolean}">
        <CheckBox IsChecked="{Binding Value}"/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:Duration}">
        <TextBox Text="{Binding Value}"/>
    </DataTemplate>
    <view:DeviceTypeConverter x:Key="devTypeConverter"/>
    <!--https://stackoverflow.com/questions/4443600/is-there-a-way-to-use-data-template-inheritance-in-wpf-->
    <sys:Double x:Key="propNameColWidth">100</sys:Double>
    <Grid x:Key="commonProperties" x:Shared="False">
        <Grid.ColumnDefinitions>
            <ColumnDefinition MaxWidth="{StaticResource propNameColWidth}"/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <TextBlock Text="Device type"/>
        <TextBlock Grid.Column="1" Text="{Binding ., Converter={StaticResource devTypeConverter}}"/>
        <TextBlock Grid.Row="1" Text="Name" Margin="0, 0, 5, 0"/>
        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding Name}"/>
    </Grid>
</ResourceDictionary>